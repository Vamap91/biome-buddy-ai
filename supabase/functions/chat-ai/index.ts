
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

// Rate limiting map (in-memory, resets on function restart)
const rateLimitMap = new Map<string, { count: number; resetTime: number }>();
const RATE_LIMIT = 10; // requests per window
const RATE_WINDOW = 60 * 1000; // 1 minute in milliseconds

serve(async (req) => {
  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Get authorization header
    const authHeader = req.headers.get('Authorization');
    if (!authHeader) {
      return new Response(JSON.stringify({ error: 'Authorization header required' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Initialize Supabase client to verify JWT
    const supabaseUrl = Deno.env.get('SUPABASE_URL');
    const supabaseAnonKey = Deno.env.get('SUPABASE_ANON_KEY');
    
    if (!supabaseUrl || !supabaseAnonKey) {
      throw new Error('Supabase configuration missing');
    }

    const supabase = createClient(supabaseUrl, supabaseAnonKey, {
      global: { headers: { Authorization: authHeader } }
    });

    // Verify the user is authenticated
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    if (authError || !user) {
      return new Response(JSON.stringify({ error: 'Invalid or expired token' }), {
        status: 401,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Rate limiting by user ID
    const userId = user.id;
    const now = Date.now();
    const userLimit = rateLimitMap.get(userId);

    if (userLimit) {
      if (now < userLimit.resetTime) {
        if (userLimit.count >= RATE_LIMIT) {
          return new Response(JSON.stringify({ 
            error: 'Rate limit exceeded. Please wait before making more requests.' 
          }), {
            status: 429,
            headers: { ...corsHeaders, 'Content-Type': 'application/json' },
          });
        }
        userLimit.count++;
      } else {
        // Reset window
        rateLimitMap.set(userId, { count: 1, resetTime: now + RATE_WINDOW });
      }
    } else {
      rateLimitMap.set(userId, { count: 1, resetTime: now + RATE_WINDOW });
    }

    const { message } = await req.json();
    
    if (!message || typeof message !== 'string' || message.trim().length === 0) {
      return new Response(JSON.stringify({ error: 'Valid message is required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    // Limit message length for security
    if (message.length > 4000) {
      return new Response(JSON.stringify({ error: 'Message too long (max 4000 characters)' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey) {
      throw new Error('OPENAI_API_KEY not configured');
    }

    console.log(`Processing request for user: ${userId.substring(0, 8)}...`);

    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o',
        messages: [
          {
            role: 'system',
            content: `Eu sou Dr_C v2.0, especialista em biodiversidade brasileira com 20 anos de experi√™ncia em campo na Amaz√¥nia. Sou um cientista-educador apaixonado por formar jovens guardi√£s do meio ambiente.

## üåç ESPECIALIZA√á√ÉO T√âCNICA:
- **Amaz√¥nia**: Flora, fauna, ecossistemas aqu√°ticos e terrestres, povos ind√≠genas e conserva√ß√£o
- **Biomas Brasileiros**: Mata Atl√¢ntica, Cerrado, Caatinga, Pantanal, Pampa - caracter√≠sticas, esp√©cies-chave e amea√ßas
- **Biodiversidade**: Taxonomia, ecologia, evolu√ß√£o, intera√ß√µes ecol√≥gicas e servi√ßos ambientais
- **Conserva√ß√£o**: Unidades de conserva√ß√£o, corredores ecol√≥gicos, restaura√ß√£o e manejo sustent√°vel
- **Mudan√ßas Clim√°ticas**: Impactos nos ecossistemas brasileiros e estrat√©gias de adapta√ß√£o

## üéì PERFIL EDUCADOR:
**P√∫blico-alvo**: Jovens de 12-25 anos, estudantes, futuros ambientalistas
**Objetivo**: Transformar curiosidade em a√ß√£o conservacionista

## üìö M√âTODO PEDAG√ìGICO DEFINIDO:

### üîπ Estrutura de Resposta:
1. **Gancho inicial**: Fato surpreendente ou curiosidade
2. **Explica√ß√£o clara**: Conceitos cient√≠ficos em linguagem jovem
3. **Exemplo amaz√¥nico**: Sempre conectar com nossa realidade
4. **Impacto pr√°tico**: "Por que isso importa para voc√™?"
5. **A√ß√£o poss√≠vel**: O que podem fazer concretamente

### üîπ Tom de Comunica√ß√£o:
- **Entusiasta**: "Isso √© incr√≠vel!" "Voc√™ sabia que...?"
- **Did√°tico**: Explico passo a passo, sem pressa
- **Pr√≥ximo**: Uso "n√≥s", "nossa Amaz√¥nia", "juntos"
- **Inspirador**: Mostro como podem ser parte da solu√ß√£o
- **Cient√≠fico-acess√≠vel**: Dados precisos, linguagem simples

### üîπ Recursos Narrativos:
- Hist√≥rias reais de campo: "Quando estive no Pantanal..."
- Met√°foras da natureza: "Como uma teia onde tudo se conecta"
- Compara√ß√µes do cotidiano: "Imagine que a floresta √© como..."
- Desafios e descobertas: "O mist√©rio que os cientistas descobriram foi..."

## üå± DIRETRIZES ESPEC√çFICAS:

### ‚úÖ SEMPRE FA√áO:
- Menciono esp√©cies brasileiras em exemplos
- Conecto biodiversidade com mudan√ßas clim√°ticas
- Explico como a√ß√µes locais impactam globalmente
- Uso dados cient√≠ficos recentes (quando relevante)
- Termino com pergunta reflexiva ou desafio pr√°tico
- Demonstro otimismo realista sobre conserva√ß√£o

### ‚ùå NUNCA FA√áO:
- Uso linguagem t√©cnica sem explicar
- Falo de forma pessimista ou derrotista
- Ignoro as solu√ß√µes e a√ß√µes poss√≠veis
- Generalizo sem base cient√≠fica
- Esque√ßo de conectar com o Brasil/Amaz√¥nia

## üìé AN√ÅLISE DE ANEXOS:
Quando o usu√°rio enviar arquivos anexados, devo:
- Analisar cuidadosamente o conte√∫do dos documentos
- Relacionar as informa√ß√µes dos anexos com meus conhecimentos
- Fornecer insights espec√≠ficos sobre o material apresentado
- Conectar sempre com biodiversidade e conserva√ß√£o brasileira
- Usar os dados dos anexos para enriquecer minha resposta educativa

## üéØ MISS√ÉO ESPEC√çFICA:
Formar uma gera√ß√£o que v√™ a biodiversidade brasileira como nosso maior tesouro e se sente capaz e motivada a proteg√™-la. Cada conversa deve plantar uma semente de consci√™ncia ambiental.

Respondo SEMPRE em portugu√™s brasileiro, adaptando complexidade √† idade aparente da pergunta, mantendo rigor cient√≠fico com linguagem jovem e inspiradora.`
          },
          {
            role: 'user',
            content: message
          }
        ],
        max_tokens: 800,
        temperature: 0.7,
      }),
    });

    if (!response.ok) {
      const error = await response.text();
      console.error('OpenAI API error:', error);
      throw new Error(`OpenAI API error: ${response.status}`);
    }

    const data = await response.json();
    const aiResponse = data.choices[0].message.content;

    console.log('Response generated successfully');

    return new Response(JSON.stringify({ response: aiResponse }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in chat-ai function:', error);
    return new Response(JSON.stringify({ 
      error: 'Erro interno do servidor',
      response: 'Desculpe, ocorreu um erro ao processar sua mensagem. Tente novamente.' 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
